// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/inference.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models/error.dart';
import 'models/tensor.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
    await api.crateApiInferenceInitInference();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.0';

  @override
  int get rustContentHash => 1818969595;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'inference',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiInferenceClearCache();

  String crateApiInferenceDetectEngineFromBytes(
      {required List<int> modelBytes});

  String crateApiInferenceDetectEngineFromPath({required String modelPath});

  Future<void> crateApiInferenceDisposeSession({required BigInt sessionHandle});

  List<String> crateApiInferenceGetAvailableEngines();

  Future<BigInt> crateApiInferenceGetCacheSize();

  Future<SessionInfo> crateApiInferenceGetSessionInfo(
      {required BigInt sessionHandle});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<void> crateApiInferenceInitInference();

  bool crateApiInferenceIsEngineAvailable({required String engineType});

  Future<SessionInfo> crateApiInferenceLoadFromHuggingface(
      {required String repo, String? revision, String? filename});

  Future<SessionInfo> crateApiInferenceLoadModel({required String modelPath});

  Future<SessionInfo> crateApiInferenceLoadModelFromBytes(
      {required List<int> modelBytes, required SessionConfig config});

  Future<SessionInfo> crateApiInferenceLoadModelFromFile(
      {required String filePath});

  Future<SessionInfo> crateApiInferenceLoadModelFromUrl(
      {required String url, required bool cache, String? cacheKey});

  Future<SessionInfo> crateApiInferenceLoadModelWithCandle(
      {required String modelPath});

  Future<SessionInfo> crateApiInferenceLoadModelWithConfig(
      {required String modelPath, required SessionConfig config});

  Future<InferenceResult> crateApiInferencePredict(
      {required BigInt sessionHandle, required InferenceInput input});

  Future<List<InferenceResult>> crateApiInferencePredictBatch(
      {required BigInt sessionHandle, required List<InferenceInput> inputs});

  Future<SessionConfig> crateApiInferenceSessionConfigDefault();

  Future<SessionInfo> crateApiInferenceTrainLinfaModel(
      {required List<Float64List> features,
      required String algorithm,
      required Map<String, String> params});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiInferenceClearCache() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceClearCacheConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceClearCacheConstMeta =>
      const TaskConstMeta(
        debugName: "clear_cache",
        argNames: [],
      );

  @override
  String crateApiInferenceDetectEngineFromBytes(
      {required List<int> modelBytes}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(modelBytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceDetectEngineFromBytesConstMeta,
      argValues: [modelBytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceDetectEngineFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "detect_engine_from_bytes",
        argNames: ["modelBytes"],
      );

  @override
  String crateApiInferenceDetectEngineFromPath({required String modelPath}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(modelPath, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceDetectEngineFromPathConstMeta,
      argValues: [modelPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceDetectEngineFromPathConstMeta =>
      const TaskConstMeta(
        debugName: "detect_engine_from_path",
        argNames: ["modelPath"],
      );

  @override
  Future<void> crateApiInferenceDisposeSession(
      {required BigInt sessionHandle}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sessionHandle, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceDisposeSessionConstMeta,
      argValues: [sessionHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceDisposeSessionConstMeta =>
      const TaskConstMeta(
        debugName: "dispose_session",
        argNames: ["sessionHandle"],
      );

  @override
  List<String> crateApiInferenceGetAvailableEngines() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceGetAvailableEnginesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceGetAvailableEnginesConstMeta =>
      const TaskConstMeta(
        debugName: "get_available_engines",
        argNames: [],
      );

  @override
  Future<BigInt> crateApiInferenceGetCacheSize() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceGetCacheSizeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceGetCacheSizeConstMeta =>
      const TaskConstMeta(
        debugName: "get_cache_size",
        argNames: [],
      );

  @override
  Future<SessionInfo> crateApiInferenceGetSessionInfo(
      {required BigInt sessionHandle}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sessionHandle, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceGetSessionInfoConstMeta,
      argValues: [sessionHandle],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceGetSessionInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_session_info",
        argNames: ["sessionHandle"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiInferenceInitInference() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceInitInferenceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceInitInferenceConstMeta =>
      const TaskConstMeta(
        debugName: "init_inference",
        argNames: [],
      );

  @override
  bool crateApiInferenceIsEngineAvailable({required String engineType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(engineType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceIsEngineAvailableConstMeta,
      argValues: [engineType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceIsEngineAvailableConstMeta =>
      const TaskConstMeta(
        debugName: "is_engine_available",
        argNames: ["engineType"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadFromHuggingface(
      {required String repo, String? revision, String? filename}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(repo, serializer);
        sse_encode_opt_String(revision, serializer);
        sse_encode_opt_String(filename, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadFromHuggingfaceConstMeta,
      argValues: [repo, revision, filename],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadFromHuggingfaceConstMeta =>
      const TaskConstMeta(
        debugName: "load_from_huggingface",
        argNames: ["repo", "revision", "filename"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModel({required String modelPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(modelPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelConstMeta,
      argValues: [modelPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelConstMeta => const TaskConstMeta(
        debugName: "load_model",
        argNames: ["modelPath"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModelFromBytes(
      {required List<int> modelBytes, required SessionConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(modelBytes, serializer);
        sse_encode_box_autoadd_session_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelFromBytesConstMeta,
      argValues: [modelBytes, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelFromBytesConstMeta =>
      const TaskConstMeta(
        debugName: "load_model_from_bytes",
        argNames: ["modelBytes", "config"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModelFromFile(
      {required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(filePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelFromFileConstMeta,
      argValues: [filePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelFromFileConstMeta =>
      const TaskConstMeta(
        debugName: "load_model_from_file",
        argNames: ["filePath"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModelFromUrl(
      {required String url, required bool cache, String? cacheKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        sse_encode_bool(cache, serializer);
        sse_encode_opt_String(cacheKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelFromUrlConstMeta,
      argValues: [url, cache, cacheKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelFromUrlConstMeta =>
      const TaskConstMeta(
        debugName: "load_model_from_url",
        argNames: ["url", "cache", "cacheKey"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModelWithCandle(
      {required String modelPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(modelPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelWithCandleConstMeta,
      argValues: [modelPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelWithCandleConstMeta =>
      const TaskConstMeta(
        debugName: "load_model_with_candle",
        argNames: ["modelPath"],
      );

  @override
  Future<SessionInfo> crateApiInferenceLoadModelWithConfig(
      {required String modelPath, required SessionConfig config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(modelPath, serializer);
        sse_encode_box_autoadd_session_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceLoadModelWithConfigConstMeta,
      argValues: [modelPath, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceLoadModelWithConfigConstMeta =>
      const TaskConstMeta(
        debugName: "load_model_with_config",
        argNames: ["modelPath", "config"],
      );

  @override
  Future<InferenceResult> crateApiInferencePredict(
      {required BigInt sessionHandle, required InferenceInput input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sessionHandle, serializer);
        sse_encode_box_autoadd_inference_input(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_inference_result,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferencePredictConstMeta,
      argValues: [sessionHandle, input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferencePredictConstMeta => const TaskConstMeta(
        debugName: "predict",
        argNames: ["sessionHandle", "input"],
      );

  @override
  Future<List<InferenceResult>> crateApiInferencePredictBatch(
      {required BigInt sessionHandle, required List<InferenceInput> inputs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(sessionHandle, serializer);
        sse_encode_list_inference_input(inputs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_inference_result,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferencePredictBatchConstMeta,
      argValues: [sessionHandle, inputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferencePredictBatchConstMeta =>
      const TaskConstMeta(
        debugName: "predict_batch",
        argNames: ["sessionHandle", "inputs"],
      );

  @override
  Future<SessionConfig> crateApiInferenceSessionConfigDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInferenceSessionConfigDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceSessionConfigDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "session_config_default",
        argNames: [],
      );

  @override
  Future<SessionInfo> crateApiInferenceTrainLinfaModel(
      {required List<Float64List> features,
      required String algorithm,
      required Map<String, String> params}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_list_prim_f_64_strict(features, serializer);
        sse_encode_String(algorithm, serializer);
        sse_encode_Map_String_String_None(params, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_session_info,
        decodeErrorData: sse_decode_inference_error,
      ),
      constMeta: kCrateApiInferenceTrainLinfaModelConstMeta,
      argValues: [features, algorithm, params],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInferenceTrainLinfaModelConstMeta =>
      const TaskConstMeta(
        debugName: "train_linfa_model",
        argNames: ["features", "algorithm", "params"],
      );

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  InferenceInput dco_decode_box_autoadd_inference_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_inference_input(raw);
  }

  @protected
  SessionConfig dco_decode_box_autoadd_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_session_config(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  DataType dco_decode_data_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataType.values[raw as int];
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InferenceError dco_decode_inference_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return InferenceError_ModelLoad(
          dco_decode_String(raw[1]),
        );
      case 1:
        return InferenceError_Prediction(
          dco_decode_String(raw[1]),
        );
      case 2:
        return InferenceError_UnsupportedFormat(
          dco_decode_String(raw[1]),
        );
      case 3:
        return InferenceError_InvalidShape(
          expected: dco_decode_list_prim_usize_strict(raw[1]),
          actual: dco_decode_list_prim_usize_strict(raw[2]),
        );
      case 4:
        return InferenceError_InvalidTensorData(
          dco_decode_String(raw[1]),
        );
      case 5:
        return InferenceError_Engine(
          dco_decode_String(raw[1]),
        );
      case 6:
        return InferenceError_Io(
          dco_decode_String(raw[1]),
        );
      case 7:
        return InferenceError_Serialization(
          dco_decode_String(raw[1]),
        );
      case 8:
        return InferenceError_Configuration(
          dco_decode_String(raw[1]),
        );
      case 9:
        return InferenceError_ResourceNotFound(
          dco_decode_String(raw[1]),
        );
      case 10:
        return InferenceError_MemoryAllocation(
          dco_decode_String(raw[1]),
        );
      case 11:
        return InferenceError_ThreadPool(
          dco_decode_String(raw[1]),
        );
      case 12:
        return InferenceError_Gpu(
          dco_decode_String(raw[1]),
        );
      case 13:
        return InferenceError_FormatDetection(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  InferenceInput dco_decode_inference_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InferenceInput(
      data: dco_decode_list_prim_f_32_strict(arr[0]),
      shape: dco_decode_list_prim_usize_strict(arr[1]),
      dataType: dco_decode_String(arr[2]),
    );
  }

  @protected
  InferenceResult dco_decode_inference_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InferenceResult(
      data: dco_decode_list_prim_f_32_strict(arr[0]),
      shape: dco_decode_list_prim_usize_strict(arr[1]),
      dataType: dco_decode_String(arr[2]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<InferenceInput> dco_decode_list_inference_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_inference_input).toList();
  }

  @protected
  List<InferenceResult> dco_decode_list_inference_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_inference_result).toList();
  }

  @protected
  List<Float64List> dco_decode_list_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_list_prim_f_64_strict)
        .toList();
  }

  @protected
  List<BigInt?> dco_decode_list_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_opt_box_autoadd_usize)
        .toList();
  }

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float32List;
  }

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Float64List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint64List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<TensorSpec> dco_decode_list_tensor_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tensor_spec).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  SessionConfig dco_decode_session_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SessionConfig(
      engineType: dco_decode_opt_String(arr[0]),
      gpuAcceleration: dco_decode_bool(arr[1]),
      numThreads: dco_decode_opt_box_autoadd_usize(arr[2]),
      optimizationLevel: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  SessionInfo dco_decode_session_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SessionInfo(
      handle: dco_decode_u_64(arr[0]),
      engineType: dco_decode_String(arr[1]),
      inputSpecs: dco_decode_list_tensor_spec(arr[2]),
      outputSpecs: dco_decode_list_tensor_spec(arr[3]),
    );
  }

  @protected
  TensorSpec dco_decode_tensor_spec(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TensorSpec(
      name: dco_decode_String(arr[0]),
      shape: dco_decode_list_opt_box_autoadd_usize(arr[1]),
      dataType: dco_decode_data_type(arr[2]),
      description: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  InferenceInput sse_decode_box_autoadd_inference_input(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_inference_input(deserializer));
  }

  @protected
  SessionConfig sse_decode_box_autoadd_session_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_session_config(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DataType.values[inner];
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InferenceError sse_decode_inference_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_ModelLoad(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Prediction(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_UnsupportedFormat(var_field0);
      case 3:
        var var_expected = sse_decode_list_prim_usize_strict(deserializer);
        var var_actual = sse_decode_list_prim_usize_strict(deserializer);
        return InferenceError_InvalidShape(
            expected: var_expected, actual: var_actual);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_InvalidTensorData(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Engine(var_field0);
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Io(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Serialization(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Configuration(var_field0);
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_ResourceNotFound(var_field0);
      case 10:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_MemoryAllocation(var_field0);
      case 11:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_ThreadPool(var_field0);
      case 12:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_Gpu(var_field0);
      case 13:
        var var_field0 = sse_decode_String(deserializer);
        return InferenceError_FormatDetection(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  InferenceInput sse_decode_inference_input(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_list_prim_f_32_strict(deserializer);
    var var_shape = sse_decode_list_prim_usize_strict(deserializer);
    var var_dataType = sse_decode_String(deserializer);
    return InferenceInput(
        data: var_data, shape: var_shape, dataType: var_dataType);
  }

  @protected
  InferenceResult sse_decode_inference_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_list_prim_f_32_strict(deserializer);
    var var_shape = sse_decode_list_prim_usize_strict(deserializer);
    var var_dataType = sse_decode_String(deserializer);
    return InferenceResult(
        data: var_data, shape: var_shape, dataType: var_dataType);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<InferenceInput> sse_decode_list_inference_input(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <InferenceInput>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_inference_input(deserializer));
    }
    return ans_;
  }

  @protected
  List<InferenceResult> sse_decode_list_inference_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <InferenceResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_inference_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<Float64List> sse_decode_list_list_prim_f_64_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Float64List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_f_64_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<BigInt?> sse_decode_list_opt_box_autoadd_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BigInt?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_usize(deserializer));
    }
    return ans_;
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<TensorSpec> sse_decode_list_tensor_spec(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TensorSpec>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tensor_spec(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SessionConfig sse_decode_session_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_engineType = sse_decode_opt_String(deserializer);
    var var_gpuAcceleration = sse_decode_bool(deserializer);
    var var_numThreads = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_optimizationLevel = sse_decode_opt_String(deserializer);
    return SessionConfig(
        engineType: var_engineType,
        gpuAcceleration: var_gpuAcceleration,
        numThreads: var_numThreads,
        optimizationLevel: var_optimizationLevel);
  }

  @protected
  SessionInfo sse_decode_session_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_handle = sse_decode_u_64(deserializer);
    var var_engineType = sse_decode_String(deserializer);
    var var_inputSpecs = sse_decode_list_tensor_spec(deserializer);
    var var_outputSpecs = sse_decode_list_tensor_spec(deserializer);
    return SessionInfo(
        handle: var_handle,
        engineType: var_engineType,
        inputSpecs: var_inputSpecs,
        outputSpecs: var_outputSpecs);
  }

  @protected
  TensorSpec sse_decode_tensor_spec(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_shape = sse_decode_list_opt_box_autoadd_usize(deserializer);
    var var_dataType = sse_decode_data_type(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    return TensorSpec(
        name: var_name,
        shape: var_shape,
        dataType: var_dataType,
        description: var_description);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_inference_input(
      InferenceInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_inference_input(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_session_config(
      SessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_session_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_inference_error(
      InferenceError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case InferenceError_ModelLoad(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Prediction(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_UnsupportedFormat(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_InvalidShape(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_usize_strict(expected, serializer);
        sse_encode_list_prim_usize_strict(actual, serializer);
      case InferenceError_InvalidTensorData(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Engine(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Io(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Serialization(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Configuration(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_ResourceNotFound(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_MemoryAllocation(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_ThreadPool(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_Gpu(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_String(field0, serializer);
      case InferenceError_FormatDetection(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_inference_input(
      InferenceInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_f_32_strict(self.data, serializer);
    sse_encode_list_prim_usize_strict(self.shape, serializer);
    sse_encode_String(self.dataType, serializer);
  }

  @protected
  void sse_encode_inference_result(
      InferenceResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_f_32_strict(self.data, serializer);
    sse_encode_list_prim_usize_strict(self.shape, serializer);
    sse_encode_String(self.dataType, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_inference_input(
      List<InferenceInput> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_inference_input(item, serializer);
    }
  }

  @protected
  void sse_encode_list_inference_result(
      List<InferenceResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_inference_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_f_64_strict(
      List<Float64List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_f_64_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_usize(
      List<BigInt?> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tensor_spec(
      List<TensorSpec> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tensor_spec(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_session_config(SessionConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.engineType, serializer);
    sse_encode_bool(self.gpuAcceleration, serializer);
    sse_encode_opt_box_autoadd_usize(self.numThreads, serializer);
    sse_encode_opt_String(self.optimizationLevel, serializer);
  }

  @protected
  void sse_encode_session_info(SessionInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.handle, serializer);
    sse_encode_String(self.engineType, serializer);
    sse_encode_list_tensor_spec(self.inputSpecs, serializer);
    sse_encode_list_tensor_spec(self.outputSpecs, serializer);
  }

  @protected
  void sse_encode_tensor_spec(TensorSpec self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_list_opt_box_autoadd_usize(self.shape, serializer);
    sse_encode_data_type(self.dataType, serializer);
    sse_encode_opt_String(self.description, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}
