// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/inference.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'models/error.dart';
import 'models/tensor.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  DownloadProgress dco_decode_box_autoadd_download_progress(dynamic raw);

  @protected
  InferenceInput dco_decode_box_autoadd_inference_input(dynamic raw);

  @protected
  SessionConfig dco_decode_box_autoadd_session_config(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw);

  @protected
  DataType dco_decode_data_type(dynamic raw);

  @protected
  DownloadPhase dco_decode_download_phase(dynamic raw);

  @protected
  DownloadProgress dco_decode_download_progress(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  InferenceError dco_decode_inference_error(dynamic raw);

  @protected
  InferenceInput dco_decode_inference_input(dynamic raw);

  @protected
  InferenceResult dco_decode_inference_result(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<InferenceInput> dco_decode_list_inference_input(dynamic raw);

  @protected
  List<InferenceResult> dco_decode_list_inference_result(dynamic raw);

  @protected
  List<Float64List> dco_decode_list_list_prim_f_64_strict(dynamic raw);

  @protected
  List<BigInt?> dco_decode_list_opt_box_autoadd_usize(dynamic raw);

  @protected
  Float32List dco_decode_list_prim_f_32_strict(dynamic raw);

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  Uint64List dco_decode_list_prim_usize_strict(dynamic raw);

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  List<TensorSpec> dco_decode_list_tensor_spec(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  DownloadProgress? dco_decode_opt_box_autoadd_download_progress(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  SessionConfig dco_decode_session_config(dynamic raw);

  @protected
  SessionInfo dco_decode_session_info(dynamic raw);

  @protected
  TensorSpec dco_decode_tensor_spec(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  DownloadProgress sse_decode_box_autoadd_download_progress(
      SseDeserializer deserializer);

  @protected
  InferenceInput sse_decode_box_autoadd_inference_input(
      SseDeserializer deserializer);

  @protected
  SessionConfig sse_decode_box_autoadd_session_config(
      SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  DataType sse_decode_data_type(SseDeserializer deserializer);

  @protected
  DownloadPhase sse_decode_download_phase(SseDeserializer deserializer);

  @protected
  DownloadProgress sse_decode_download_progress(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  InferenceError sse_decode_inference_error(SseDeserializer deserializer);

  @protected
  InferenceInput sse_decode_inference_input(SseDeserializer deserializer);

  @protected
  InferenceResult sse_decode_inference_result(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<InferenceInput> sse_decode_list_inference_input(
      SseDeserializer deserializer);

  @protected
  List<InferenceResult> sse_decode_list_inference_result(
      SseDeserializer deserializer);

  @protected
  List<Float64List> sse_decode_list_list_prim_f_64_strict(
      SseDeserializer deserializer);

  @protected
  List<BigInt?> sse_decode_list_opt_box_autoadd_usize(
      SseDeserializer deserializer);

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer);

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  Uint64List sse_decode_list_prim_usize_strict(SseDeserializer deserializer);

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer);

  @protected
  List<TensorSpec> sse_decode_list_tensor_spec(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  DownloadProgress? sse_decode_opt_box_autoadd_download_progress(
      SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer);

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer);

  @protected
  SessionConfig sse_decode_session_config(SseDeserializer deserializer);

  @protected
  SessionInfo sse_decode_session_info(SseDeserializer deserializer);

  @protected
  TensorSpec sse_decode_tensor_spec(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_Map_String_String_None(
      Map<String, String> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_download_progress(
      DownloadProgress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_inference_input(
      InferenceInput self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_session_config(
      SessionConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_data_type(DataType self, SseSerializer serializer);

  @protected
  void sse_encode_download_phase(DownloadPhase self, SseSerializer serializer);

  @protected
  void sse_encode_download_progress(
      DownloadProgress self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_inference_error(
      InferenceError self, SseSerializer serializer);

  @protected
  void sse_encode_inference_input(
      InferenceInput self, SseSerializer serializer);

  @protected
  void sse_encode_inference_result(
      InferenceResult self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_inference_input(
      List<InferenceInput> self, SseSerializer serializer);

  @protected
  void sse_encode_list_inference_result(
      List<InferenceResult> self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_f_64_strict(
      List<Float64List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opt_box_autoadd_usize(
      List<BigInt?> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_usize_strict(
      Uint64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tensor_spec(
      List<TensorSpec> self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_download_progress(
      DownloadProgress? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_usize(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer);

  @protected
  void sse_encode_session_config(SessionConfig self, SseSerializer serializer);

  @protected
  void sse_encode_session_info(SessionInfo self, SseSerializer serializer);

  @protected
  void sse_encode_tensor_spec(TensorSpec self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
